/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init() { self.val = 0; self.left = nil; self.right = nil; }
 *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
 *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
 *         self.val = val
 *         self.left = left
 *         self.right = right
 *     }
 * }
 */
class Solution {
    func inorderTraversal(_ root: TreeNode?) -> [Int] {
        return inorderTraversalIterative(root)
    }

    func inorderTraversalIterative(_ root: TreeNode?) -> [Int] {
        var result: [Int] = []
        var current = root
        var stack: [TreeNode] = []

        while current != nil || !stack.isEmpty {
            if let node = current {
                stack.append(node)
                current = node.left
            } else {
                let previousNode = stack.removeLast()
                result.append(previousNode.val)
                current = previousNode.right
            }
        }

        return result
    }

    func inorderTraversalIterativeV2(_ root: TreeNode?) -> [Int] {
        var result: [Int] = []
        var current = root
        var stack: [TreeNode] = []

        while current != nil || !stack.isEmpty {
            while let node = current {
                stack.append(node)
                current = node.left
            }
            let node = stack.removeLast()
            result.append(node.val)
            current = node.right
        }

        return result
    }

    func inorderTraversalIterativeV1(_ root: TreeNode?) -> [Int] {
        var result: [Int] = []
        var current = root
        var stack: [TreeNode] = []

        while current != nil || !stack.isEmpty {
            while let node = current {
                stack.append(node)
                current = node.left
            }
            current = stack.removeLast()
            result.append(current!.val)
            current = current?.right
        }

        return result
    }

    func inorderTraversalRecursive(_ root: TreeNode?) -> [Int] {
        var result: [Int] = []

        func inorder(_ root: TreeNode?) {
            guard let root else { return }
            inorder(root.left)
            result.append(root.val)
            inorder(root.right)
        }

        inorder(root)

        return result
    }
}