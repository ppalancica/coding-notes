class Solution {
    func thirdMax(_ nums: [Int]) -> Int {
        var firstMax = Int.min
        var secondMax = Int.min
        var thirdMax = Int.min

        for n in nums {
            if n == firstMax || n == secondMax || n == thirdMax {
                continue
            }

            if n > firstMax {
                thirdMax = secondMax
                secondMax = firstMax
                firstMax = n
            } else if n > secondMax {
                thirdMax = secondMax
                secondMax = n
            } else if n > thirdMax {
                thirdMax = n
            }
        }

        guard thirdMax != Int.min else {
            return firstMax
        }

        return thirdMax
    }
    
    func thirdMaxNaive(_ nums: [Int]) -> Int {
        var max1 = Int.min
        var max2 = Int.min
        var max3 = Int.min

        for i in 0..<nums.count {
            max1 = max(max1, nums[i])
        }

        for i in 0..<nums.count {
            if nums[i] != max1 {
                max2 = max(max2, nums[i])
            }
        }

        for i in 0..<nums.count {
            if nums[i] != max1 && nums[i] != max2 {
                max3 = max(max3, nums[i])
            }
        }

        guard max3 != Int.min else {
            return max1
        }

        return max3
    }
}