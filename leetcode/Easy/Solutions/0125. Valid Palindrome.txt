private extension Character {
    var isAlphanumeric: Bool {
        return isLetter || isNumber
    }
}

class Solution {
    func isPalindrome(_ s: String) -> Bool {
        let chars = Array(s.lowercased())
        var left = 0
        var right = chars.count - 1

        while left < right {
            if !chars[left].isAlphanumeric {
                left += 1
            } else if !chars[right].isAlphanumeric {
                right -= 1
            } else {
                if chars[left] != chars[right] { return false }
                left += 1
                right -= 1
            }
        }

        return true
    }

    func isPalindromeV5(_ s: String) -> Bool {
        var left = s.startIndex
        var right = s.index(before: s.endIndex)

        while left < right {
            if !s[left].isAlphanumeric {
                left = s.index(after: left)
            } else if !s[right].isAlphanumeric {
                right = s.index(before: right)
            } else {
                if s[left].lowercased() != s[right].lowercased() { return false }
                left = s.index(after: left)
                right = s.index(before: right)                
            }
        }

        return true
    }

    func isPalindromeV4(_ s: String) -> Bool {
        let chars = Array(s.lowercased())
        var left = 0
        var right = chars.count - 1

        while left < right {
            while left < chars.count && !chars[left].isAlphanumeric {
                left += 1
            }

            while right >= 0 && !chars[right].isAlphanumeric {
                right -= 1
            }

            // After skipping, check if we've crossed
            if left > right { break }

            if chars[left] != chars[right] {
                return false
            }

            left += 1
            right -= 1
        }

        return true
    }

    func isPalindromeV3(_ s: String) -> Bool {
        let chars = Array(s.lowercased())

        var left = 0
        var right = chars.count - 1

        while left < right {
            while left < right && !chars[left].isAlphanumeric {
                left += 1
            }
            
            while left < right && !chars[right].isAlphanumeric {
                right -= 1
            }

            // To avoid checking if '-' == '-' in strings like "A%-A"
            // and 'y' == 'y' in strings like 'kayak'
            if left == right { return true }

            if chars[left] != chars[right] { return false }

            left += 1
            right -= 1
        }

        return true
    }

    func isPalindromeV2(_ s: String) -> Bool {
        let s = s.lowercased().filter { $0.isLetter || $0.isNumber }
        
        if s.isEmpty { return true }
        
        var leftIndex = s.startIndex
        var rightIndex = s.index(before: s.endIndex)
        
        while leftIndex < rightIndex {
            if s[leftIndex] != s[rightIndex] {
                return false
            }
            leftIndex = s.index(after: leftIndex)
            rightIndex = s.index(before: rightIndex)
        }
        
        return true
    }

    func isPalindromeV1(_ s: String) -> Bool {
        let characters = Array(s.lowercased())

        var left = 0
        var right = characters.count - 1

        while left < right {
            if !characters[left].isAlphanumeric {
                left += 1
                continue
            }
            
            if !characters[right].isAlphanumeric {
                right -= 1
                continue
            }

            if characters[left] != characters[right] {
                return false
            }

            left += 1
            right -= 1
        }

        return true
    }
}