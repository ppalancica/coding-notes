--- Stack of Int items

class Stack {
    var items: [Int] = []
    
    func push(n: Int) {
        items.append(n)
    }
    
    func pop() -> Int? {
        return items.popLast()
    }

    func peek() -> Int? {
        return items.last
    }
}

--- Generic Stack

public struct Stack<T> {
    private var items: [T] = []
    
    public mutating func push(element: T) {
        items.append(element)
    }

    public mutating func pop() -> T? {
        return items.popLast()
    }
    
    public func peek() -> T? {
        return items.last
    }
}

--- Queue of Int items

class Queue {
    var items: [Int] = []
    
    func enqueue(n: Int) {
        items.append(n)
    }
    
    func dequeue() -> Int? {
        if items.isEmpty { return nil }
        return items.removeFirst()
    }

    func peek() -> Int? {
        return items.first
    }
}

--- Generic Queue

public struct Queue<T> {
    private var items: [T] = []
    
    public mutating func enqueue(element: T) {
        items.append(element)
    }
    
    public mutating func dequeue() -> T? {
        if items.isEmpty { return nil }
        return items.removeFirst()
    }

    public func peak() -> T? {
        return items.first
    }
}

--- Generic Node

public class Node<NodeType> {
    public var value: NodeType
    public var next: Node?
    
    public init(value: NodeType) {
        self.value = value
    }
}

extension Node: CustomStringConvertible {
    public var description: String {
        if let next {
            return "\(value) -> " + String(describing: next) + " "
        }
        return "\(value)"
    }
}

--- Generic SinglyLinkedList

public class SinglyLinkedList<ListType> {
    public var head: Node<ListType>?
    
    public var isEmpty: Bool {
        return head == nil
    }
    
    public func append(value: ListType) {
        let newNode = Node(value: value)
        if var h = head {
            while h.next != nil {
                h = h.next!
            }
            h.next = newNode
        } else {
            head = newNode
        }
    }
}