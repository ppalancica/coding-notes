/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public func isInteger() -> Bool
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     public func getInteger() -> Int
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public func setInteger(value: Int)
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public func add(elem: NestedInteger)
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     public func getList() -> [NestedInteger]
 * }
 */

class NestedIterator {

    var numbers: [Int] = []
    var currentIndex = 0

    init(_ nestedList: [NestedInteger]) {
        numbers = numbersFromArray(nestedList)
    }

    func numbersFromArray(_ array: [NestedInteger]) -> [Int] {
        var numbers: [Int] = []
        for item in array {
            if item.isInteger() {
                numbers.append(item.getInteger())
            } else {
                let innerArrayNumbers = numbersFromArray(item.getList())
                numbers.append(contentsOf: innerArrayNumbers)
            }
        }
        return numbers
    }

    func numbersFromArrayV2(_ array: [NestedInteger]) -> [Int] {
        var numbers: [Int] = []
        var stack: [(NestedInteger, Int)] = []
        
        for item in array.reversed() {
            stack.append((item, 0))
        }
        
        while !stack.isEmpty {
            let (item, index) = stack.removeLast()
            
            if item.isInteger() {
                numbers.append(item.getInteger())
            } else {
                let innerArray = item.getList()
                if index < innerArray.count {
                    stack.append((item, index + 1))
                    stack.append((innerArray[index], 0))
                }
            }
        }
        
        return numbers
    }
    
    func next() -> Int {
        let result = hasNext() ? numbers[currentIndex] : NSNotFound
        currentIndex += 1
        return result
    }
    
    func hasNext() -> Bool {
        return currentIndex < numbers.count
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * let obj = NestedIterator(nestedList)
 * let ret_1: Int = obj.next()
 * let ret_2: Bool = obj.hasNext()
 */